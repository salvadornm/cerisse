#!/usr/bin/env python

import sys
import os
import numpy as np
import fileinput
import shutil
import yt

# def read_mms_convergence_data_file(mms_data_file_name):
#     '''
#        Read convergence data based on infinitiy-norm and two-norm generated by MMS scripts.
#        dx | L2-cont | L2-momx | L2-momy | L2-momz | L2-engy | Linf-cont | Linf-momx | Linf-momy | Linf-momz | Linf-engy | 
#     '''

#     mms_convergence_data = np.loadtxt(mms_data_file_name)
#     nruns = np.shape(mms_convergence_data)[0]

#     return mms_convergence_data,nruns
#-----------------------------------------------------------------------------------------------------------------------------------------------------
def compute_convergence_rate(mms_convergence_data,nruns,ncols):
    '''
       Compute convergence rates based on error norms read from file.
    '''
   
    convergence_rate = np.zeros([nruns,ncols-1])

    dx = mms_convergence_data[:,0]
    
    for i in range(nruns-1):
        for j in range(ncols-1):
            convergence_rate[i+1,j] = np.log(mms_convergence_data[i+1,j+1]/mms_convergence_data[i,j+1])/np.log(dx[i+1]/dx[i])

    return convergence_rate
#-----------------------------------------------------------------------------------------------------------------------------------------------------
def output_data(mms_convergence_data,convergence_rate,nruns,is3D):
    '''
       Grid level | dx | Eqn | L2-norm | L2-rate | Linf-rate
    '''

    offset = 0

    dx        = mms_convergence_data[:,0   ]
    if (is3D.lower()=='true'):
        Linf      = mms_convergence_data[:,1:6 ]
        L2        = mms_convergence_data[:,6:11]        
        Linf_rate = convergence_rate[:,0:5 ]
        L2_rate   = convergence_rate[:,5:10]
        L2_avg    = np.ones(5)
        Linf_avg  = np.ones(5)
        for i in range(5):
            L2_avg[i]   = np.mean(L2_rate[1:,i])
            Linf_avg[i] = np.mean(Linf_rate[1:,i])        
        
    elif (is3D.lower()=='false'):
        Linf      = mms_convergence_data[:,1:5]
        L2        = mms_convergence_data[:,5:9]        
        Linf_rate = convergence_rate[:,0:4 ]
        L2_rate   = convergence_rate[:,4:8]
        L2_avg    = np.ones(4)
        Linf_avg  = np.ones(4)
        for i in range(4):
            L2_avg[i]   = np.mean(L2_rate[1:,i])
            Linf_avg[i] = np.mean(Linf_rate[1:,i])                    

    print('|   %10s  |  %14s  |  %10s  |  %14s  |  %13s  |  %14s  |  %14s  |'%('Grid level','dx','RHS-Eqn','L2-Norm','L2-Rate','Linf-Norm','Linf-rate'))
    print('------------------------------------------------------------------------------------------------------------------------------')
    
    for i in range(nruns):
        print('|   %10d  |  %10.8e  |  %10s  |  %10.8e  | %10.8e  |  %10.8e  |  %10.8e  '%(i+1 ,dx[i],'Continuity',L2[i,0],L2_rate[i,0],Linf[i,0],Linf_rate[i,0]))
        print('|   %10s  |  %14s  |  %10s  |  %10.8e  | %10.8e  |  %10.8e  |  %10.8e  |'%('------','------','x-Momentum',L2[i,1],L2_rate[i,1],Linf[i,1],Linf_rate[i,1]))
        print('|   %10s  |  %14s  |  %10s  |  %10.8e  | %10.8e  |  %10.8e  |  %10.8e  |'%('------','------','y-Momentum',L2[i,2],L2_rate[i,2],Linf[i,2],Linf_rate[i,2]))
        if (is3D.lower()=='true'):
            offset = 1
            print('|   %10s  |  %14s  |  %10s  |  %10.8e  | %10.8e  |  %10.8e  |  %10.8e  |'%('------','------','z-Momentum',L2[i,3],L2_rate[i,3],Linf[i,3],Linf_rate[i,3]))
        print('|   %10s  |  %14s  |  %10s  |  %10.8e  | %10.8e  |  %10.8e  |  %10.8e  |'%('------','------','Energy    ',L2[i,3+offset],L2_rate[i,3+offset],Linf[i,3+offset],Linf_rate[i,3+offset]))
        print('------------------------------------------------------------------------------------------------------------------------------')        
        
    return L2_avg, Linf_avg
#-----------------------------------------------------------------------------------------------------------------------------------------------------
def ComputeConvergenceRates():
    # print("")
    # print("[I] Computing convergence rates...")

    # filename         = sys.argv[1]
    # is3D             = sys.argv[2]

    # if (is3D.lower()=='true'):
    #     ncols = 11
    # else:
    #     ncols = 9
        
    # mms_data,nruns   = read_mms_convergence_data_file(filename)
    convergence_rate = compute_convergence_rate(mms_data,nruns,ncols)

    L2_avg, Linf_avg = output_data(mms_data,convergence_rate,nruns,is3D)
    # if (IsViscousMMS):
    #     L2_mean          = np.mean(L2_avg[1:])
    #     Linf_mean        = np.mean(Linf_avg[1:])
    # else:
    L2_mean          = np.mean(L2_avg[:])
    Linf_mean        = np.mean(Linf_avg[:])
                
    print("[I] Avgerage convergence rate (L2)  : {:6.4f}".format(L2_mean))
    print("[I] Avgerage convergence rate (Linf): {:6.4f}".format(Linf_mean))

    print("[I] Convergence rate computed.")
    print("")

    return L2_mean,Linf_mean
#-----------------------------------------------------------------------------------------------------------------------------------------------------
def CheckConvergenceOrder(L2_mean,Linf_mean,ExpectedOrder,Tolerance):

    MMS_Pass = False
    if ((L2_mean>ExpectedOrder-Tolerance) and (Linf_mean>ExpectedOrder-Tolerance)):
        MMS_Pass = True

    return MMS_Pass
#-----------------------------------------------------------------------------------------------------------------------------------------------------
def main():

    ############################################################################
    # inputs
    ncells_array = np.array([8, 16, 32, 64]) 
    nvar = 5
    nruns = len(ncells_array)

    ############################################################################
    print("Compiling code")
    os.system("make -j8")

    ############################################################################
    print("Running MMS")
    # create a temporary input file to change the ncells
    shutil.copyfile("inputs", "temp_input")

    for ncells in ncells_array:
      # modify input file
      for line in fileinput.input("temp_input", inplace=True):
        # print line.replace("amr.n_cell", "bar")
        if "amr.n_cell" in line:
          line = "amr.n_cell = " + str(ncells) + " " + str(ncells) + " " + str(ncells) + "\n"

        if "amr.plot_file" in line:
          line = "amr.plot_file = " + "./plot/plt_ncells" + str(ncells)+ "_" + "\n"

        sys.stdout.write (line)
      
      # run the code
      os.system("./main3d.gnu.ex temp_input")

    # remove temporary input file
    os.remove("temp_input")

    ############################################################################
    print("Computing norms")
    field_list = ['density', 'xmom', 'ymom', 'zmom', 'energy']
    L_inf_error = np.zeros([nruns,nvar])
    L_2_error = np.zeros([nruns,nvar])
    dx  = np.zeros(nruns)
    for i,ncells in enumerate(ncells_array):
        data = yt.load("./plot/plt_ncells" + str(ncells) + "_00001/")
        ad = data.all_data()
        dx[i] = data.domain_width[0].value/ncells
        
        for j in range(nvar):
            # print(field[1])
            values = ad[field_list[j]].to_ndarray()
            L_inf_error[i,j] = np.linalg.norm(values,np.inf)
            L_2_error[i,j]     = ((sum(values**2)/ncells**3)**0.5)
            # print(L_2[i,j], L_inf[i][j])
        

    ############################################################################
    print("Computing convergence rate")
    assert nruns>2, "Need at least 3 runs to compute convergence rates"

    L_2_rate = np.zeros([nruns,nvar])
    L_inf_rate = np.zeros([nruns,nvar])

    for i in range(nruns-1):
        for j in range(nvar):
            # print(i,j)
            L_2_rate[i+1,j] = np.log(L_2_error[i+1,j]/L_2_error[i,j])/np.log(dx[i+1]/dx[i])
            L_inf_rate[i+1,j] = np.log(L_inf_error[i+1,j]/L_inf_error[i,j])/np.log(dx[i+1]/dx[i])
            # print(L_2_rate[i,j], L_inf_rate[i,j])

    print('|   %10s  |  %14s  |  %10s  |  %14s  |  %13s  |  %14s  |  %14s  |'%('Grid','dx','RHS-Eqn','L2-Norm','L2-Rate','Linf-Norm','Linf-rate'))
    print('------------------------------------------------------------------------------------------------------------------------------')
    for i in range(nruns):
        print('|   %10d  |  %10.8e  |  %10s  |  %10.8e  | %10.8e  |  %10.8e  |  %10.8e  '%(i ,dx[i],'Continuity',L_2_error[i,0],L_2_rate[i,0],L_inf_error[i,0],L_inf_rate[i,0]))
        print('|   %10s  |  %14s  |  %10s  |  %10.8e  | %10.8e  |  %10.8e  |  %10.8e  |'%('------','------','x-Momentum',L_2_error[i,1],L_2_rate[i,1],L_inf_error[i,1],L_inf_rate[i,1]))
        print('|   %10s  |  %14s  |  %10s  |  %10.8e  | %10.8e  |  %10.8e  |  %10.8e  |'%('------','------','y-Momentum',L_2_error[i,2],L_2_rate[i,2],L_inf_error[i,2],L_inf_rate[i,2]))
        print('|   %10s  |  %14s  |  %10s  |  %10.8e  | %10.8e  |  %10.8e  |  %10.8e  |'%('------','------','z-Momentum',L_2_error[i,3],L_2_rate[i,3],L_inf_error[i,3],L_inf_rate[i,3]))
        print('|   %10s  |  %14s  |  %10s  |  %10.8e  | %10.8e  |  %10.8e  |  %10.8e  |'%('------','------','Energy    ',L_2_error[i,4],L_2_rate[i,4],L_inf_error[i,4],L_inf_rate[i,4]))
        print('------------------------------------------------------------------------------------------------------------------------------')   

    print('|   %10s  |  %14s  |  %10s  |  %14s  | %10.8e  |  %14s  |  %10.8e  '%('Mean' ,'------','Continuity','------',np.average(L_2_rate[1:,0]),'------',np.average(L_inf_rate[1:,0])))

    print('|   %10s  |  %14s  |  %10s  |  %14s  | %10.8e  |  %14s  |  %10.8e  |'%('------','------','x-Momentum','------',np.average(L_2_rate[1:,1]),'------',np.average(L_inf_rate[1:,1])))

    print('|   %10s  |  %14s  |  %10s  |  %14s  | %10.8e  |  %14s  |  %10.8e  |'%('------','------','y-Momentum','------',L_2_rate[i,2],'------',L_inf_rate[i,2]))

    print('|   %10s  |  %14s  |  %10s  |  %14s  | %10.8e  |  %14s  |  %10.8e  |'%('------','------','z-Momentum','------',np.average(L_2_rate[1:,3]),'------',np.average(L_inf_rate[1:,3])))

    print('|   %10s  |  %14s  |  %10s  |  %14s  | %10.8e  |  %14s  |  %10.8e  |'%('------','------','Energy    ','------',np.average(L_2_rate[1:,4]),'------',np.average(L_inf_rate[1:,4])))


    L_2_mean          = np.mean(L_2_rate[1:,:])
    L_inf_mean        = np.mean(L_inf_rate[1:,:])
                
    print("Avgerage L2 convergence rate   : {:6.4f}".format(L_2_mean))
    print("Avgerage Linf convergence rate : {:6.4f}".format(L_inf_mean))


    # if (MMS_Pass):
    #     MMS_Val = 0
    # else:
    #     MMS_Val = 1       

    # return MMS_Vales")
    # compute convergence rates
    # L2_mean
    # Linf_mean 
    # ExpectedOrder     = float(sys.argv[3])
    # Tolerance         = 0.25*ExpectedOrder
    
    exit(0)
    return True
    # MMS_Pass = CheckConvergenceOrder(L2_mean,Linf_mean,ExpectedOrder,Tolerance)

    # if (MMS_Pass):
    #     MMS_Val = 0
    # else:
    #     MMS_Val = 1       

    # return MMS_Val

ReturnVal = main()
sys.exit(ReturnVal)
